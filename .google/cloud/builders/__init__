#!/bin/bash

# Unmark the 2 line below to see all commands available
#echo -e "\n$hr\nPATH COMMANDS\n$hr"
#compgen -c | xargs which -a | sort && dpkg -l

# Dependencies
source .google/list_files

# Adjust column numbers ('180') follow to your screen
printf -v res %180s
export hr=`printf '%s\n' "${res// /_}"`
export hrd=`printf '%s\n' "${res// /=}"`

# Environtment
export WORKSPACE=$(realpath .)
export PATH=$HOME/.local/bin:$PATH
export OUTPUTS_VOLUME=/builder/outputs/volume
[[ ! -d $OUTPUTS_VOLUME ]] && mkdir -p $OUTPUTS_VOLUME
  
# Check active gcloud
if [[ "${TAG_NAME}" == "gcloud" ]]
then
    # Set Google App Credentials
    if [[ -z $(gcloud config get-value account 2> /dev/null) ]]
    then
        # Dependencies: GCP_ACCOUNT & GCP_SA_KEY
        if [[ -z $GOOGLE_APPLICATION_CREDENTIALS ]]
        then
            echo $GCP_SA_KEY > .google-app-creds.json && KEY_FILE=$(realpath .google-app-creds.json)
    	    gcloud auth activate-service-account $GCP_ACCOUNT --key-file=$KEY_FILE --project=$PROJECT_ID
    	fi
    fi

    # Private repository
    if [[ ! -f $HOME/.ssh ]]
    then
        # Dependencies: Set 'mirror configuration' to Google Repository
        # Name the repo to be on top of the list and Set IAM role to clone it
        gcloud source repos clone --verbosity=none $(gcloud source repos list --limit=1 --format 'value(REPO_NAME)') .io &> /dev/null
        if [[ "$BRANCH_NAME" != "master" ]]
        then
            cd .io
            if grep -q origin/$BRANCH_NAME << EOF
`git branch -r`
EOF
            then
                git checkout $BRANCH_NAME
            fi
            cd ..
        fi
        
        # Get credential files
        find .io -type d -name $PROJECT_ID -exec cp -frpT {} $HOME \;
        rm -f .cp && find $HOME -type d -name $REPO_NAME | while read dir; do greb_files $dir; done

        # Set credential files
        for i in $HOME/.ssh/*.enc
        do
            # Decrypt credential files
            # Dependencies: Put name of keys same as encrypted files
            if [[ ! -f ${i%.*} ]]  
            then
                gcloud kms decrypt --location global --keyring my-keyring --key $(basename ${i%.*}) \
                --ciphertext-file $i --plaintext-file ${i%.*}
            fi
            # Put environtment
            # Dependencies: Put the name of file as env_keys
            if [[ "$(basename ${i%.*})" == "env_keys" ]]  
            then
                echo WORKSPACE=$WORKSPACE >> ${i%.*}
                echo OUTPUTS_VOLUME=$OUTPUTS_VOLUME >> ${i%.*}
                [[ -n "${KEY_FILE+set}" ]] && echo GOOGLE_APPLICATION_CREDENTIALS=$KEY_FILE >> ${i%.*}
                # Google Compute Instance
                if [[ -n $(gcloud compute instances list --limit=1 --format 'value(name)') ]]
                then
                    ZONE=`gcloud compute instances list --limit=1 --format 'value(zone)' --filter="status=('RUNNING')"`
                    NAME=`gcloud compute instances list --limit=1 --format 'value(name)' --filter="status=('RUNNING')"`
                    echo "INSTANCE_ZONE=$ZONE" >> ${i%.*} && echo "INSTANCE_NAME=$NAME" >> ${i%.*}
                fi
            fi
            chmod 600 ${i%.*}
        done	
    fi
fi

# Run the current step
read_files ${0%/*}/$TAG_NAME
